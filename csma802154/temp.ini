





[Config AODV_CollaborationBased_7]


# AODV_CollaborationBased_7
# Sane as *_6 only for just region 4


# AODV_CollaborationBased_6
# Like the others except, ALL region, fixed 5s interval and 
# network size 50 - 250 in steps of 10


# AODV_CollaborationBased_5
# Same as 4 except Just appliances in region 4

# AODV_CollaborationBased_4
# 250 nodes, single propert region
# 5 appliances starting at intervals ranging 0 aprt to 5s apart (in steps of 0.25s)
# Otherwise pretty much like below

# AODV_CollaborationBased_3
# This version is like *_2 but the appliance start ups are 5s apart


# AODV_CollaborationBased_2
# This version has 

# Five appliances "across a property" collaborate with each other. 
# The appliances start up at one second intervals. In the case of Zigbee 
# when an appliance starts up it has to register with the control unit 
# and await confirmation.  Then it sends an application  request to the control unit and the 
# control unit sends an application command to each of the other applinaces. The control 
# unit is situated at a corner of the property and it is assumed it has already 
# formed a network proactive route.
# We repeat the experiment for network size 50 through 250 in steps of 10.

# In AODV_CollaborationBased_1 the 5 appliances were in a single region 


description = ""

# Varying parameters
#*.numFixHosts = ${numNodes=50..125 step 1}
#*.numFixHosts = 250
#*.numFixHosts = 50
*.numFixHosts = ${numNodes=50..250 step 10} # 21 steps

repeat = 25 # 25 * 21 = 525 Should be OK with GUI
seed-set = ${repetition}
num-rngs = 2


# I think we may not want estimation because I think we have to
# set the simulation finishing time far enough ahead to have
# enough breaks between sequential sendings 
#**.estimationMethod = "experiment"


# In order that we can measure the cost in time of successfully sending all first 
#data transmissions including overhead
#**.app.delayData = 3 # Send data at earliest oportunity




# Control Unit related parameters
**.manetrouting.proactiveRreqTimeout = 36000000 # 10 Hours, ie never
**.manetrouting.suppress_rreps_on_proactive_rreqs = true

# Multiple simultaneous RREPs can affect registration with CU
# Retries required and so confirmation required 
**.fixhost[*].udpApp.BindingNumTries = 3
**.fixhost[*].udpApp.BindingTimeOut = 0.75
**.fixhost[0].udpApp.confirmRegistration = true


#**.fixhost[0].app.nodeStartTime = 0.01 # default zero




#nodeStartTime
#scheduleStartTime
#timeSinkRegisterWithControlUnit

# heat_sensor_one_pkt.txt

//**.fixhost[0].app.sinkFor = "\x2"+"\x2"+"\x0" # error line but ignored?
**.fixhost[0].app.simAppTerminationReason = 2 # when all have arrived
**.fixhost[0].app.first_proactiveRreqTimeout = 0 # zero default



#**.region[4].regionHost[0].first_proactiveRreqTimeout = ${increment} * 3
















**.region[4].regionHost[0].sourceFor = "\x2"+"\x2"+"\x0" # will use longest context
**.region[4].regionHost[0].sinkFor = "\x2"+"\x2"+"\x0" # will use longest context
**.region[4].regionHost[0].actionThreads = "demand_one_pkt.txt"
#**.region[4].regionHost[0].scheduleStartTime = ${node1=10,  10,  10,  10,  10}
#**.region[4].regionHost[0].scheduleStartTime = 10 + (${interval = 0..5 step 0.25} * 0)
#**.region[4].regionHost[0].nodeStartTime = 10 + (${interval} * 0)
**.region[4].regionHost[0].scheduleStartTime = ${node1=10}
**.region[4].regionHost[0].nodeStartTime = ${node1}
**.region[4].regionHost[0].isAppliance = true

**.region[4].regionHost[1].sourceFor = "\x2"+"\x2"+"\x0" # will use longest context
**.region[4].regionHost[1].sinkFor = "\x2"+"\x2"+"\x0" # will use longest context
**.region[4].regionHost[1].actionThreads = "demand_one_pkt.txt"
#**.region[4].regionHost[1].scheduleStartTime = 10 + (${interval} * 1)
#**.region[4].regionHost[1].nodeStartTime = 10 + (${interval} * 1)
**.region[4].regionHost[1].scheduleStartTime = ${node2=15}
**.region[4].regionHost[1].nodeStartTime = ${node2}
**.region[4].regionHost[1].isAppliance = true

**.region[4].regionHost[2].sourceFor = "\x2"+"\x2"+"\x0" # will use longest context
**.region[4].regionHost[2].sinkFor = "\x2"+"\x2"+"\x0" # will use longest context
**.region[4].regionHost[2].actionThreads = "demand_one_pkt.txt"
#**.region[4].regionHost[2].scheduleStartTime =  10 + (${interval} * 2)
#**.region[4].regionHost[2].nodeStartTime =  10 + (${interval} * 2)
**.region[4].regionHost[2].scheduleStartTime = ${node3=20}
**.region[4].regionHost[2].nodeStartTime = ${node3}
**.region[4].regionHost[2].isAppliance = true

**.region[4].regionHost[3].sourceFor = "\x2"+"\x2"+"\x0" # will use longest context
**.region[4].regionHost[3].sinkFor = "\x2"+"\x2"+"\x0" # will use longest context
**.region[4].regionHost[3].actionThreads = "demand_one_pkt.txt"
#**.region[4].regionHost[3].scheduleStartTime =  10 + (${interval} * 3)
#**.region[4].regionHost[3].nodeStartTime = 10 + (${interval} * 3)
**.region[4].regionHost[3].scheduleStartTime = ${node4=25}
**.region[4].regionHost[3].nodeStartTime = ${node4}
**.region[4].regionHost[3].isAppliance = true

**.region[4].regionHost[4].sourceFor = "\x2"+"\x2"+"\x0" # will use longest context
**.region[4].regionHost[4].sinkFor = "\x2"+"\x2"+"\x0" # will use longest context
**.region[4].regionHost[4].actionThreads = "demand_one_pkt.txt"
#**.region[4].regionHost[4].scheduleStartTime = 10 + (${interval} * 4)
#**.region[4].regionHost[4].nodeStartTime = 10 + (${interval} * 4)
**.region[4].regionHost[4].scheduleStartTime = ${node5=30}
**.region[4].regionHost[4].nodeStartTime = ${node5}
**.region[4].regionHost[4].isAppliance = true












#############################################




# Simulation completion
sim-time-limit = 40s


# CU is a sink and 5 arrivals at 
#**.expectedDataArrivals = ${expected=1, 3, 6, 10, 15 ! node1}
#**.expectedDataArrivals = ${expected=0, 1, 3, 6, 10 ! node1}
**.expectedDataArrivals = 10






# Timed behaviour



#        PREPREPARED STRINGS FOR USE
#        string STRINGEND = "\x0";
#        string DEMAND_QUERYBASED = "\x2";
#        string DEMAND_COLLABERATIONBASED = "\x42";
#        string ENVIRONMENTAL_EVENTBASED = "\x83";
#        string CURRENT = "\x2";
#        string BID = "\x1";
#        string OCCUPANCY = "\x1";
#        string TEMP = "\x2";
















