[General]
#debug-on-errors = true
#sim-time-limit = 3000s
sim-time-limit = 1000s
output-scalar-file-append = false
#network = inet.examples.wpan.csma802154.csma802154net
network = csma802154net

num-rngs = 2

cmdenv-express-mode = true
tkenv-plugin-path = ../../../Etc/plugins
#tkenv-default-run=1

description = "Aodv Simple test"

#**.vector-recording = false
**.constraintAreaMinX = 0m
**.constraintAreaMinY = 0m
**.constraintAreaMinZ = 0m
**.constraintAreaMaxX = 10m
**.constraintAreaMaxY = 12m
**.constraintAreaMaxZ = 3.5m

**.numRegions = 5

**.region[0].x = 0
**.region[0].y = 0
**.region[0].z = 0
**.region[0].w = 10
**.region[0].h = 12
**.region[0].d = 3.5
**.region[0].context = "\x06\x00"

**.region[1].x = 0
**.region[1].y = 0
**.region[1].z = 0
**.region[1].w = 5
**.region[1].h = 6
**.region[1].d = 3.5
**.region[1].context = "\x06\x01\x00"

**.region[2].x = 5
**.region[2].y = 0
**.region[2].z = 0
**.region[2].w = 5
**.region[2].h = 6
**.region[2].d = 3.5
**.region[2].context = "\x06\x02\x00"

**.region[3].x = 0
**.region[3].y = 6
**.region[3].z = 0
**.region[3].w = 5
**.region[3].h = 6
**.region[3].d = 3.5
**.region[3].context = "\x06\x03\x00"

**.region[4].x = 5
**.region[4].y = 6
**.region[4].z = 0
**.region[4].w = 5
**.region[4].h = 6
**.region[4].d = 3.5
**.region[4].context = "\x06\x04\x00"




#**.dataCentricNetworkMan.sources = "\x06\x01"+",0,0,"+"\x83"+"\x2"+"\x0"+",heat_sensor.txt,"+\
#								   "\x06\x02"+",0,0,"+"\x83"+"\x2"+"\x0"+",heat_sensor.txt,"+\
#								   "\x06\x03"+",0,0,"+"\x83"+"\x2"+"\x0"+",heat_sensor.txt,"+\
#								   "\x06\x04"+",0,0,"+"\x83"+"\x2"+"\x0"+",heat_sensor.txt"
								   # ENVIRONMENTAL_EVENTBASED+TEMP+STRINGEND

#**.dataCentricNetworkMan.sinks = "\x06\x01"+",1,3,"+"\x83"+"\x2"+"\x0"+",sink_NR,"+\
#								 "\x06\x02"+",1,3,"+"\x83"+"\x2"+"\x0"+",sink_NR,"+\
#								 "\x06\x03"+",1,3,"+"\x83"+"\x2"+"\x0"+",sink_NR,"+\
#								 "\x06\x04"+",1,3,"+"\x83"+"\x2"+"\x0"+",sink_NR"
								   # ENVIRONMENTAL_EVENTBASED+TEMP+STRINGEND



**.region[1].regionHost[0].nodeStartTime = 1.0 # enable send/receive send grads and hello
**.region[1].regionHost[1].nodeStartTime = 2.0 # enable send/receive send grads and hello
**.region[1].regionHost[2].nodeStartTime = 3.0 # enable send/receive send grads and hello
**.region[1].regionHost[3].nodeStartTime = 4.0 # enable send/receive send grads and hello
**.region[2].regionHost[0].nodeStartTime = 5.0 # enable send/receive send grads and hello
**.region[2].regionHost[1].nodeStartTime = 6.0 # enable send/receive send grads and hello
**.region[2].regionHost[2].nodeStartTime = 7.0 # enable send/receive send grads and hello
**.region[2].regionHost[3].nodeStartTime = 8.0 # enable send/receive send grads and hello
**.region[3].regionHost[0].nodeStartTime = 9.0 # enable send/receive send grads and hello
**.region[3].regionHost[1].nodeStartTime = 10.0 # enable send/receive send grads and hello
**.region[3].regionHost[2].nodeStartTime = 11.0 # enable send/receive send grads and hello
**.region[3].regionHost[3].nodeStartTime = 12.0 # enable send/receive send grads and hello
**.region[4].regionHost[0].nodeStartTime = 13.0 # enable send/receive send grads and hello
**.region[4].regionHost[1].nodeStartTime = 14.0 # enable send/receive send grads and hello
**.region[4].regionHost[2].nodeStartTime = 15.0 # enable send/receive send grads and hello
**.region[4].regionHost[3].nodeStartTime = 16.0 # enable send/receive send grads and hello
**.region[*].regionHost[*].nodeStartTime = 17.0 # enable send/receive send grads and hello


**.region[1].regionHost[0].scheduleStartTime = 20.00
**.region[2].regionHost[0].scheduleStartTime = 21.00
**.region[3].regionHost[0].scheduleStartTime = 22.00
**.region[4].regionHost[0].scheduleStartTime = 23.00
**.region[*].regionHost[*].scheduleStartTime = 3.00 # begin pattern of sending data, eg temp, watts, occupancy


**.region[1..4].regionHost[0].sourceFor = "\x83"+"\x2"+"\x0"

**.region[1..4].regionHost[0].actionThreads = "heat_sensor.txt"



**.region[1].regionHost[1..3].sinkFor = "\x83"+"\x2"+"\x0"

**.region[2].regionHost[1..3].sinkFor = "\x83"+"\x2"+"\x0"

**.region[3].regionHost[1..3].sinkFor = "\x83"+"\x2"+"\x0"

**.region[4].regionHost[1..3].sinkFor = "\x83"+"\x2"+"\x0"



*.numFixHosts = 125
**.debug = true
**.coreDebug = false
**.channelNumber = 0

#        PREPREPARED STRINGS FOR USE
#        string STRINGEND = "\x0";
#        string DEMAND_QUERYBASED = "\x2";
#        string DEMAND_COLLABERATIONBASED = "\x42";
#        string ENVIRONMENTAL_EVENTBASED = "\x83";
#        string CURRENT = "\x2";
#        string BID = "\x1";
#        string OCCUPANCY = "\x1";
#        string TEMP = "\x2";


#**.host*.mobility.updateInterval = 0.1
#**.host*.mobility.traceFile = "escen_v5_t500-1.txt"

#**.fixhost[*].app.nodeContext = "\x06"
**.fixhost[*].app.appMode = "AODV"


**.fixhost[*].udpApp.setBroadcast = true

**.fixhost[*].udpApp.outputInterfaceMulticastBroadcast = "wlan"
#**.fixhost[*].udpApp.outputInterface = "wlan"


# Set which host is the control unti
**.fixhost[115].udpApp.isControlUnit = true

# The choice of control unit address is a common standard known to all apps
**.fixhost[*].udpApp.controlUnit = "csma802154net.fixhost[115]"





#**.fixhost[36].app.nodeStartTime = 1.0 # enable send/receive send grads and hello
#**.fixhost[13].app.nodeStartTime = 3.0 # enable send/receive send grads and hello
#**.fixhost[*].app.nodeStartTime = 1.0 # enable send/receive send grads and hello

#**.fixhost[13].app.scheduleStartTime = 10.1 # begin pattern of sending data, eg temp, watts, occupancy
#**.fixhost[*].app.scheduleStartTime = 3.00 # begin pattern of sending data, eg temp, watts, occupancy

#**.fixhost[36].app.sinkFor = "\x2"+"\x2"+"\x0" # DEMAND_QUERYBASED+CURRENT+STRINGEND
#**.fixhost[13].app.sourceFor = "\x2"+"\x2"+"\x0" # DEMAND_QUERYBASED+CURRENT+STRINGEND
#**.fixhost[13].app.actionThreads = "Fridge.txt"





# Scenario X
# four regions, each with one publication source for temperature and three sinks.  
# Currently they can only be all started at the same time until the config feature is improved
################################################################################################

#**.fixhost[*].app.nodeStartTime = 1.0 # enable send/receive send grads and hello
#**.fixhost[*].app.scheduleStartTime = 3.00 # begin pattern of sending data, eg temp, watts, occupancy


#**.dataCentricNetworkMan.sources = "\x06\x01"+",0,0,"+"\x83"+"\x2"+"\x0"+",heat_sensor.txt,"+\
#								   "\x06\x02"+",0,0,"+"\x83"+"\x2"+"\x0"+",heat_sensor.txt,"+\
#								   "\x06\x03"+",0,0,"+"\x83"+"\x2"+"\x0"+",heat_sensor.txt,"+\
#								   "\x06\x04"+",0,0,"+"\x83"+"\x2"+"\x0"+",heat_sensor.txt"
								   # ENVIRONMENTAL_EVENTBASED+TEMP+STRINGEND

#**.dataCentricNetworkMan.sinks = "\x06\x01"+",1,3,"+"\x83"+"\x2"+"\x0"+",sink_NR,"+\
#								 "\x06\x02"+",1,3,"+"\x83"+"\x2"+"\x0"+",sink_NR,"+\
#								 "\x06\x03"+",1,3,"+"\x83"+"\x2"+"\x0"+",sink_NR,"+\
#								 "\x06\x04"+",1,3,"+"\x83"+"\x2"+"\x0"+",sink_NR"
								   # ENVIRONMENTAL_EVENTBASED+TEMP+STRINGEND

#**.host[*].app.actionThreads = ""



################################################################################################




#**.host*.mobility.changeInterval = truncnormal(5, 0.5)
#**.host*.mobility.changeAngleBy = normal(0, 90)
#**.host*.mobility.speed = 2
**.host*.mobility.updateInterval = 0.1s


**.fixhost[*].udpAppType = "UDPBurstAndBroadcast"





**.udpApp.localPort = 1234
**.udpApp.destPort = 1234
**.udpApp.messageLength = 64B # Bytes
**.udpApp.sendInterval = 3s #0.25s + uniform(-0.001s,0.001s,1)
**.udpApp.burstDuration = 10s #uniform(1s,4s,1) #uniform(1s,4s,1)
**.udpApp.sleepDuration = 0s
**.udpApp.chooseDestAddrMode = "perBurst"
**.udpApp.stopTime = 0s # uniform(10s,20s,1))
**.udpApp.startTime = 30s #uniform(20s,35s)
**.udpApp.delayLimit =200s
**.udpApp.destAddrRNG = 1

# tcp apps (off)
**.numTcpApps = 0
**.tcpAppType = "TelnetApp"

# ping app (host[0] pinged by others)
# ping app (off)
**.pingApp.destAddr = ""
**.pingApp.srcAddr = ""
**.pingApp.packetSize = 56B
**.pingApp.interval = 1s
**.pingApp.hopLimit = 32
**.pingApp.count = 0
**.pingApp.startTime = 1s
**.pingApp.stopTime = 0
**.pingApp.printPing = true

#*.fixhost[0].pingApp.destAddr=""
#*.host[*].pingApp.destAddr="fixhost[0]"
#**.pingApp.srcAddr=""
#**.pingApp.packetSize=56
#**.pingApp.interval =1
#**.pingApp.hopLimit=32
#**.pingApp.count=0
#**.pingApp.startTime=uniform(1,5)
#**.pingApp.stopTime=0
#**.pingApp.printPing=true

# tcp settings
**.tcp.mss = 1024
**.tcp.advertisedWindow = 14336 # 14*mss
#**.tcp.sendQueueClass = "TCPMsgBasedSendQueue"
#**.tcp.receiveQueueClass = "TCPMsgBasedRcvQueue"
**.tcp.tcpAlgorithmClass = "TCPReno"
**.tcp.recordStats = true

# ip settings
**.routingFile = ""
**.ip.procDelay = 10us
# **.IPForward=false

# ARP configuration
**.arp.retryTimeout = 1s
**.arp.retryCount = 3
**.arp.cacheTimeout = 100s
#**.networklayer.proxyARP = true # Host's is hardwired "false"

# manet routing
**.routingProtocol="AODVUU"
#**.routingProtocol.use-default=yes

##############################################################################
# Parameters for the network interface and IFqueue #
##############################################################################
**.wlan.ifqType = "DropTailQueue"
**.ifq.frameCapacity = 50

# High congestion context
**.macAckWaitDuration = 0.00056s # Datacentric is 0.005s
#**.macAckWaitDuration = 0.005s
**.macMaxCSMABackoffs = 10 # Datacentric is 10
**.macMaxFrameRetries = 10

#**.mac.aUnitBackoffPeriod = 0
#**.mac.ccaDetectionTime = 0

#**.macAckWaitDuration = 2s # just to test something regarding cause of repeats


##############################################################################
# Parameters for MAC layer #
##############################################################################
**.mac.BO = 8 # range [1,14]
**.mac.SO = 4 #range [0, BO)

##############################################################################
# Parameters for PHY layer #
##############################################################################
#**.phy.transmitterPower = 1.0mW #[mW]
#**.phy.sensitivity = -85dBm #[dBm]
#**.phy.thermalNoise = -110dBm #[dBm]
#**.phy.pathLossAlpha = 2
#**.phy.snirThreshold = 4dB



# From datacentric home network
**.phy.channelNumber				 = 11		# default 2.4G, (range [0, 26])
**.phy.transmitterPower				 = 0.1mW  	#[mW]
**.phy.sensitivity					 = -85dBm	#[dBm]
**.phy.thermalNoise				 = -110dBm	#[dBm]
**.phy.pathLossAlpha				 = 4
**.phy.snirThreshold				 = 4dB









##############################################################################
# Parameters for the channel control #
##############################################################################
# channel physical parameters
*.channelControl.carrierFrequency = 2.4GHz
*.channelControl.pMax = 2.0mW
*.channelControl.sat = -85dBm
*.channelControl.alpha = 2
*.channelControl.numChannels = 27
##############################################################################
# Parameters for the display module in the hosts #
##############################################################################
# display parameters (same as channelControl parameters and mac parameters)
**.disp.carrierFrequency = 2.4GHz
**.disp.pMax = 2.0mW
**.disp.sat = -85dBm #[dBm]
**.disp.alpha = 2
**.disp.numChannels = 27
**.disp.transmitterPower = 1.0mW #[mW]
**.disp.sensitivity = -85dBm #[dBm]

##############################################################################
# Parameters for the Energy Model (units: mAh and mA) #
##############################################################################
#**.battery.batteryCapacity = 25 #[mAh]
#**.battery.meanTimeToFailure = -1s
#**.battery.usage_radio_idle = 1.38mA #[mA]
#**.battery.usage_radio_recv = 9.6mA #[mA]
#**.battery.usage_radio_sleep = 0.06mA #[mA]
#**.phy.transmitterPower = 1.0mW #[mW]
**.phy.usageCpuActive = 7.6
**.phy.usageCpuSleep = 0.237 ## 3.3 mA for IDLE mode, 0.237 mA for Standby


**.phy.usage_radio_idle = 1.38mA #[mA]
**.phy.usage_radio_recv = 9.6mA #[mA]
**.phy.usage_radio_sleep = 0.06mA #[mA]


**.battery.nominal = 25
**.battery.capacity = 25
**.battery.voltage = 10
**.battery.resolution = 1s
**.battery.publishDelta = 0.5
**.battery.publishTime = 20s


**.rxSetupTime = 0.00108s

##############################################################################
# Output vectors #
##############################################################################
**.End-to-end delay.vector-recording = true
**.Mean end-to-end delay.vector-recording = true
**.RREQPacketFrequency.vector-recording = true
**.RReplyPacketFrequency.vector-recording = true
**.AODVDataPacketFrequency.vector-recording = true
**.DiscoveryPacketFrequency.vector-recording = true
**.RegisterPacketFrequency.vector-recording = true
**.dataPacketE2EDelay.vector-recording = true
**.vector-recording = false

##############################################################################
# Simulation runs #
##############################################################################



#**.use-default=yes

# proccesing delay in the routing protocol, avoid syncronization
**.broadcastDelay=uniform(0s,0.01s) # 10 mseconds
**.unicastDelay=uniform(0s,0.005s)

#/ parameters : DYMOUM
**.no_path_acc_ = false
**.reissue_rreq_ = false
**.s_bit_ = false
**.hello_ival_ = 0
**.MaxPktSec = 20 #// 10
**.promiscuous = false
**.NetDiameter = 10
**.RouteTimeOut = 3000
**.RouteDeleteTimeOut = 3000*5 #//5*RouteTimeOut
**.RREQWaitTime = 1000
**.RREQTries =3
**.noRouteBehaviour=1

 # // parameters: AODVUU;
**.log_to_file = false
**.hello_jittering = true
**.optimized_hellos = true
**.expanding_ring_search = false
**.local_repair = true
**.rreq_gratuitous = true
#**.debug = false
**.rt_log_interval = 0
**.unidir_hack = 0
**.internet_gw_mode = 0
**.receive_n_hellos = 1
**.ratelimit = 1000
**.llfeedback = true# //1000
**.wait_on_reboot = 0
**.active_timeout = 1800000 # // time in ms (30 mins)
**.internet_gw_address = "0.0.0.0"
**.useHover = false

#NET_TRAVERSAL_TIME

**.fixhost[0].**.costStatic = 10
**.fixhost[1].**.costStatic = 10
**.fixhost[5].**.costStatic = 10
**.fixhost[6].**.costStatic = 10
**.fixhost[10].**.costStatic = 10
**.fixhost[11].**.costStatic = 10
**.fixhost[15].**.costStatic = 10
**.fixhost[16].**.costStatic = 10





# // parameters: DSRUU;
**.PrintDebug = true
**.FlushLinkCache = true
**.PromiscOperation = false
**.UseNetworkLayerAck = false
**.BroadCastJitter = 20 # 20 ms
**.RouteCacheTimeout = 300 #300 seconds
**.SendBufferTimeout = 300# //30 s
**.SendBufferSize = -1
**.RequestTableSize = -1
**.RequestTableIds = -1
**.MaxRequestRexmt = -1 #// 16,
**.MaxRequestPeriod = 10 #//10 SECONDS
**.RequestPeriod = 500 #//500 MILLISECONDS
**.NonpropRequestTimeout = 30# //30 MILLISECONDS
**.RexmtBufferSize = -1 #//MAINT_BUF_MAX_LEN
**.MaintHoldoffTime = 250# //250 MILLISECONDS
**.MaxMaintRexmt = 2 # //2
**.TryPassiveAcks = true #//1
**.PassiveAckTimeout = 100# //100 MILLISECONDS
**.GratReplyHoldOff = 1 #, //1 SECONDS
**.MAX_SALVAGE_COUNT = 15 # //15
**.LifoSize = 20
**.PathCache = true
**.ETX_Active=false
**.ETXHelloInterval = 1 #, // Second
**.ETXWindowNumHello = 10
**.ETXRetryBeforeFail=-1
**.RREPDestinationOnly = false
**.RREQMaxVisit =5 # // Max Number that a RREQ can be processes by a node

#// Olsr
**.Willingness=3
**.Hello_ival=2
**.Tc_ival=5
**.Mid_ival=5
**.use_mac =0 #1
**.Mpr_algorithm = 1
**.routing_algorithm = 1
**.Link_quality = 2
**.Fish_eye = false
**.Tc_redundancy = 3
**.Link_delay = true #//default false
**.C_alpha=0.2

#// DSDV
**.hellomsgperiod_DSDV = 1s # //Period of DSDV hello message generation [seconds]
**.timetolive_routing_entry = 5s # // ;[seconds]
**.netmask = "255.255.0.0" # //
**.MaxVariance_DSDV = 1
**.RNGseed_DSDV = 0

# Scalars

**.Total sent.scalar-recording = true
**.Total received.scalar-recording = true
**.Total deleted.scalar-recording = true
**.Mean delay.scalar-recording = true
**.Min delay.scalar-recording = true
**.Max delay.scalar-recording = true
**.Deviation delay.scalar-recording = true
**.scalar-recording = false



