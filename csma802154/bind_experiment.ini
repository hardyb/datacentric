
[Config Sending_One_to_One_withBinding]



# detail:

# we want to measure the overhead for sending first data from one node to another
# for example an occ/temp sensor to an interested appliance

# A common strategy in AODV based Zigbee is for
# Service discovery
# and Bind request
# Then the source can request a route and send the data

# We want to measure the overall time for first delivery so the first data packet must
# be immediate.  If it is at some time in the future then the adhoc delay between establishing
# binding and sending data will be unfairly included in the stats.

# Omnet configuration:
# for aodv if we set true 'bindWithSource' then any data names set with sourceFor
# will be setup in the source hosts binding table but will not have any bound addresses
# until a service discovery completes.  In the mean time sent data will be queued until an
# address is bound.

# Currently in this simple implementation queued data does not expire and (and this does need
# fixing) is not deleted after sending.  Also not queued if at least one binding found (limitation)

# So...

# We want to configure sending data to occurr as soon as the host is configured so that data is queued
# then sent to AODV as soon as binding is established.




# Do we timestamp the packet when it is created and queued or when it is sent

# does this depend on  what we want to measure?

# if binding is initiated at the same time as data sending and we want to 
# consider the overhead in sending first packet then we want to set timestamp when 
# queueing




description = ""

# Varying parameters
*.numFixHosts = ${numNodes=50..250 step 1}
#*.numFixHosts = 250

repeat = 25

seed-set = ${repetition}

num-rngs = 2



#**.TransmissionAntennaGainIndB = -6dB 
#**.ReceiveAntennaGainIndB = -6dB
#**.ReceiveAntennaGainIndB = ${antennaRxEfficiency=-6..6 step 0.5}dB 
#**.TransmissionAntennaGainIndB = ${antennaTxEfficiency=-6..6 step 0.5 ! antennaRxEfficiency}dB 


#**.phy.transmitterPower				 = 1.0mW
#**.phy.transmitterPower = ${tmtPower=0.1..1.0 step 0.1}mW



# Control Unit related parameters
# LEAVE OUT COMMONCONTROLUNIT.INI 
#**.manetrouting.proactiveRreqTimeout = 36000000 # 10 Hours
#**.manetrouting.suppress_rreps_on_proactive_rreqs = true
#**.fixhost[48].udpApp.confirmRegistration = false
#**.fixhost[48].app.nodeStartTime = 0.01

# Adjustments to common
#**.expanding_ring_search = true
#**.phy.transmitterPower				 = 1.0mW


**.fixhost[*].udpApp.bindWithSource = true

# Two randomly placed hosts accross the whole network
**.fixhost[0].app.sourceFor = "\x83"+"\x2"+"\x0"
**.fixhost[1].app.sinkFor =   "\x83"+"\x2"+"\x0"
**.fixhost[1].app.simAppTerminationReason = 1
**.fixhost[1].app.isAppliance = true

**.fixhost[0].app.actionThreads = "heat_sensor_one_pkt.txt"

# Two randomly placed hosts accross a single region
#**.region[1].regionHost[0].sourceFor = "\x83"+"\x2"+"\x0"
#**.region[1].regionHost[1].sinkFor =   "\x83"+"\x2"+"\x0"
#**.region[1].regionHost[1].isAppliance = true

# change to only one packet or limit run time
# but start early
#**.region[1].regionHost[0].actionThreads = "heat_sensor_one_pkt.txt"




# Simulation completion
sim-time-limit = 30s # 8000s
**.expectedDataArrivals = 1


# Timed behaviour

# All hosts start radio etc and also sending data at time zero which should
# come straight after startup host congiguration  
**.fixhost[*].app.nodeStartTime = 0
**.fixhost[*].app.scheduleStartTime = 0

#**.region[1].regionHost[0].nodeStartTime = 0 # enable send/receive send grads and hello
#**.region[1].regionHost[0].scheduleStartTime = 0


#**.region[1].regionHost[1].nodeStartTime = 0 # enable send/receive send grads and hello
#**.region[1].regionHost[1].timeSinkRegisterWithControlUnit = 0


#**.region[1..4].regionHost[*].nodeStartTime = 0 # enable send/receive send grads and hello
#**.region[1..4].regionHost[*].scheduleStartTime = 0











[Config AODV_Experiment_Binding_1]

# This experiment...

description = ""

# Varying parameters
*.numFixHosts = ${numNodes=50..125 step 1}
#*.numFixHosts = 125

repeat = 10

# Control Unit related parameters
# LEAVE OUT COMMONCONTROLUNIT.INI 
#**.manetrouting.proactiveRreqTimeout = 36000000 # 10 Hours
#**.manetrouting.suppress_rreps_on_proactive_rreqs = true
#**.fixhost[48].udpApp.confirmRegistration = false
#**.fixhost[48].app.nodeStartTime = 0.01



**.fixhost[*].udpApp.bindWithSource = true


**.region[1].regionHost[0].sourceFor = "\x83"+"\x2"+"\x0"
**.region[1].regionHost[1].sinkFor =   "\x83"+"\x2"+"\x0"
**.region[1].regionHost[1].isAppliance = true

# change to only one packet or limit run time
# but start early
**.region[1].regionHost[0].actionThreads = "heat_sensor.txt"




# Simulation completion
sim-time-limit = 300s # 8000s
**.expectedDataArrivals = 1


# Timed behaviour

**.region[1].regionHost[0].nodeStartTime = 0 # enable send/receive send grads and hello
**.region[1].regionHost[0].scheduleStartTime = 0


**.region[1].regionHost[1].nodeStartTime = 0 # enable send/receive send grads and hello
**.region[1].regionHost[1].timeSinkRegisterWithControlUnit = 0


**.region[1..4].regionHost[*].nodeStartTime = 0 # enable send/receive send grads and hello
**.region[1..4].regionHost[*].scheduleStartTime = 0



[Config AODV_Experiment_Binding_2]

# This experiment...

description = ""

# Varying parameters
*.numFixHosts = ${numNodes=50..125 step 1}
#*.numFixHosts = 125

repeat = 10

# Control Unit related parameters
# LEAVE OUT COMMONCONTROLUNIT.INI 
#**.manetrouting.proactiveRreqTimeout = 36000000 # 10 Hours
#**.manetrouting.suppress_rreps_on_proactive_rreqs = true
#**.fixhost[48].udpApp.confirmRegistration = false
#**.fixhost[48].app.nodeStartTime = 0.01



**.fixhost[*].udpApp.bindWithSource = true


**.region[1..4].regionHost[0].sourceFor = "\x83"+"\x2"+"\x0"
**.region[1..4].regionHost[1].sinkFor =   "\x83"+"\x2"+"\x0"
**.region[1..4].regionHost[1].isAppliance = true

# change to only one packet or limit run time
# but start early
**.region[1..4].regionHost[0].actionThreads = "heat_sensor.txt"




# Simulation completion
sim-time-limit = 300s # 8000s
**.expectedDataArrivals = 4


# Timed behaviour

**.region[1..4].regionHost[0].nodeStartTime = 0 # enable send/receive send grads and hello
**.region[1..4].regionHost[0].scheduleStartTime = 0


**.region[1..4].regionHost[1].nodeStartTime = 0 # enable send/receive send grads and hello
**.region[1..4].regionHost[1].timeSinkRegisterWithControlUnit = 0


**.region[1..4].regionHost[*].nodeStartTime = 0 # enable send/receive send grads and hello
**.region[1..4].regionHost[*].scheduleStartTime = 0





[Config AODV_Experiment_Binding_3]

# This experiment...

description = ""

# Varying parameters
#*.numFixHosts = ${numNodes=50..125 step 1}
*.numFixHosts = 125

repeat = 10

# Control Unit related parameters
# LEAVE OUT COMMONCONTROLUNIT.INI 
#**.manetrouting.proactiveRreqTimeout = 36000000 # 10 Hours
#**.manetrouting.suppress_rreps_on_proactive_rreqs = true
#**.fixhost[48].udpApp.confirmRegistration = false
#**.fixhost[48].app.nodeStartTime = 0.01



**.fixhost[*].udpApp.bindWithSource = true


**.region[1..4].regionHost[0].sourceFor = "\x83"+"\x2"+"\x0"
**.region[1..4].regionHost[1].sinkFor =   "\x83"+"\x2"+"\x0"
**.region[1..4].regionHost[2].sourceFor = "\x83"+"\x1"+"\x0"
**.region[1..4].regionHost[3].sinkFor =   "\x83"+"\x1"+"\x0"



**.region[1..4].regionHost[1].isAppliance = true
**.region[1..4].regionHost[3].isAppliance = true

# change to only one packet or limit run time
# but start early
**.region[1..4].regionHost[0].actionThreads = "heat_sensor.txt"
**.region[1..4].regionHost[2].actionThreads = "occ_sensor.txt"




# Simulation completion
sim-time-limit = 450s # 8000s
**.expectedDataArrivals = 8


# Timed behaviour

**.region[1].regionHost[0].nodeStartTime = ${increment=0..2 step 0.1} * 0
**.region[1].regionHost[0].scheduleStartTime = ${increment} * 0
**.region[1].regionHost[1].nodeStartTime = ${increment} * 0
**.region[1].regionHost[1].timeSinkRegisterWithControlUnit = ${increment} * 0

**.region[1].regionHost[2].nodeStartTime = ${increment} * 1
**.region[1].regionHost[2].scheduleStartTime = ${increment} * 1
**.region[1].regionHost[3].nodeStartTime = ${increment} * 1
**.region[1].regionHost[3].timeSinkRegisterWithControlUnit = ${increment} * 1


**.region[2].regionHost[0].nodeStartTime = ${increment} * 2
**.region[2].regionHost[0].scheduleStartTime = ${increment} * 2
**.region[2].regionHost[1].nodeStartTime = ${increment} * 2
**.region[2].regionHost[1].timeSinkRegisterWithControlUnit = ${increment} * 2

**.region[2].regionHost[2].nodeStartTime = ${increment} * 3
**.region[2].regionHost[2].scheduleStartTime = ${increment} * 3
**.region[2].regionHost[3].nodeStartTime = ${increment} * 3
**.region[2].regionHost[3].timeSinkRegisterWithControlUnit = ${increment} * 3

**.region[3].regionHost[0].nodeStartTime = ${increment} * 4
**.region[3].regionHost[0].scheduleStartTime = ${increment} * 4
**.region[3].regionHost[1].nodeStartTime = ${increment} * 4
**.region[3].regionHost[1].timeSinkRegisterWithControlUnit = ${increment} * 4

**.region[3].regionHost[2].nodeStartTime = ${increment} * 5
**.region[3].regionHost[2].scheduleStartTime = ${increment} * 5
**.region[3].regionHost[3].nodeStartTime = ${increment} * 5
**.region[3].regionHost[3].timeSinkRegisterWithControlUnit = ${increment} * 5

**.region[4].regionHost[0].nodeStartTime = ${increment} * 6
**.region[4].regionHost[0].scheduleStartTime = ${increment} * 6
**.region[4].regionHost[1].nodeStartTime = ${increment} * 6
**.region[4].regionHost[1].timeSinkRegisterWithControlUnit = ${increment} * 6

**.region[4].regionHost[2].nodeStartTime = ${increment} * 7
**.region[4].regionHost[2].scheduleStartTime = ${increment} * 7
**.region[4].regionHost[3].nodeStartTime = ${increment} * 7
**.region[4].regionHost[3].timeSinkRegisterWithControlUnit = ${increment} * 7




**.region[1..4].regionHost[*].nodeStartTime = 0 # enable send/receive send grads and hello
**.region[1..4].regionHost[*].scheduleStartTime = 0


