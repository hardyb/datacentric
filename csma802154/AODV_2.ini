

[General]

include ../Common/misc.ini
include ../Common/energyModel.ini
include ../Common/macAndPhy.ini
include ../Common/propertyAndRegions.ini

include commonAODV.ini
include commonControlUnit.ini

#include vectorStats.ini
include scalarStats.ini






[Config AODVScenario_1]

#125 heterogeneous nodes particiapte in routing inside the property
#proctive routing by the control unit is NOT employed, but the control unit
#is on a known address.
#An appliance automatically attempts registration with the control unit about every second
#with 3 appliances in each room.  After 20s the sensor in each region starts sending data 

# half the recommended number from building automation RFC
# used for routing
*.numFixHosts = ${numNodes=50..125 step 1}


sim-time-limit = 8000s

description = "AODVScenario_1"

**.fixhost[48].app.nodeStartTime = 1.0


# One Source in each reagion
# three sinks in each region 
**.region[1..4].regionHost[0].sourceFor = "\x83"+"\x2"+"\x0"
**.region[1..4].regionHost[0].actionThreads = "heat_sensor.txt"
**.region[1].regionHost[1..3].sinkFor = "\x83"+"\x2"+"\x0"
**.region[2].regionHost[1..3].sinkFor = "\x83"+"\x2"+"\x0"
**.region[3].regionHost[1..3].sinkFor = "\x83"+"\x2"+"\x0"
**.region[4].regionHost[1..3].sinkFor = "\x83"+"\x2"+"\x0"

**.region[1].regionHost[1..3].isAppliance = true
**.region[2].regionHost[1..3].isAppliance = true
**.region[3].regionHost[1..3].isAppliance = true
**.region[4].regionHost[1..3].isAppliance = true

# One sink/source node initiate binding every second



**.region[1].regionHost[0].nodeStartTime = 1.0 # enable send/receive send grads and hello
**.region[1].regionHost[1].nodeStartTime = 2.0 # enable send/receive send grads and hello
**.region[1].regionHost[2].nodeStartTime = 3.0 # enable send/receive send grads and hello
**.region[1].regionHost[3].nodeStartTime = 4.0 # enable send/receive send grads and hello
**.region[2].regionHost[0].nodeStartTime = 5.0 # enable send/receive send grads and hello
**.region[2].regionHost[1].nodeStartTime = 6.0 # enable send/receive send grads and hello
**.region[2].regionHost[2].nodeStartTime = 7.0 # enable send/receive send grads and hello
**.region[2].regionHost[3].nodeStartTime = 8.0 # enable send/receive send grads and hello
**.region[3].regionHost[0].nodeStartTime = 9.0 # enable send/receive send grads and hello
**.region[3].regionHost[1].nodeStartTime = 10.0 # enable send/receive send grads and hello
**.region[3].regionHost[2].nodeStartTime = 11.0 # enable send/receive send grads and hello
**.region[3].regionHost[3].nodeStartTime = 12.0 # enable send/receive send grads and hello
**.region[4].regionHost[0].nodeStartTime = 13.0 # enable send/receive send grads and hello
**.region[4].regionHost[1].nodeStartTime = 14.0 # enable send/receive send grads and hello
**.region[4].regionHost[2].nodeStartTime = 15.0 # enable send/receive send grads and hello
**.region[4].regionHost[3].nodeStartTime = 16.0 # enable send/receive send grads and hello
**.region[1..4].regionHost[*].nodeStartTime = 17.0 # enable send/receive send grads and hello

# Foursource nondes begin sending data at 20, 21 and 23 seconds
**.region[1].regionHost[0].scheduleStartTime = 20.00
**.region[2].regionHost[0].scheduleStartTime = 21.00
**.region[3].regionHost[0].scheduleStartTime = 22.00
**.region[4].regionHost[0].scheduleStartTime = 23.00
**.region[1..4].regionHost[*].scheduleStartTime = 3.00







[Config AODVScenario_1e]
extends = AODVScenario_1







**.manetrouting.proactiveRreqTimeout = 36000000 # 10 Hours
**.manetrouting.suppress_rreps_on_proactive_rreqs = true

# start root at zero - sends proactive
# start key nodes at zero they will look extensively for their own root

# startup root at zero - sends proactive
# key nodes startup late, they will look for route more locally
# possibly using expanding ring
# What if all key nodes startup together

# Start the radio at 1.0
# First proactive RREQ sent at 40s
#**.fixhost[48].app.setParametersDirectly = true
**.fixhost[48].app.nodeStartTime = 0.01

#**.region[0].regionHost[48].setHostParametersDirectly = true
#**.region[1].regionHost[24].setHostParametersDirectly = true





# These start the radio at 43.0
# 0.01s later the 12 (3 x 4) sinks search for route to control Unit
**.region[1].regionHost[0].nodeStartTime = 0 # enable send/receive send grads and hello

**.region[1].regionHost[1].nodeStartTime = 0 # enable send/receive send grads and hello
**.region[1].regionHost[1].timeSinkRegisterWithControlUnit = 3.0
**.region[1].regionHost[2].nodeStartTime = 0 # enable send/receive send grads and hello
**.region[1].regionHost[2].timeSinkRegisterWithControlUnit = 4.0
**.region[1].regionHost[3].nodeStartTime = 0 # enable send/receive send grads and hello
**.region[1].regionHost[3].timeSinkRegisterWithControlUnit = 5.0

**.region[2].regionHost[0].nodeStartTime = 0 # enable send/receive send grads and hello

**.region[2].regionHost[1].nodeStartTime = 0 # enable send/receive send grads and hello
**.region[2].regionHost[1].timeSinkRegisterWithControlUnit = 6.0
**.region[2].regionHost[2].nodeStartTime = 0 # enable send/receive send grads and hello
**.region[2].regionHost[2].timeSinkRegisterWithControlUnit = 7.0
**.region[2].regionHost[3].nodeStartTime = 0 # enable send/receive send grads and hello
**.region[2].regionHost[3].timeSinkRegisterWithControlUnit = 8.0

**.region[3].regionHost[0].nodeStartTime = 0 # enable send/receive send grads and hello

**.region[3].regionHost[1].nodeStartTime = 0 # enable send/receive send grads and hello
**.region[3].regionHost[1].timeSinkRegisterWithControlUnit = 9.0
**.region[3].regionHost[2].nodeStartTime = 0 # enable send/receive send grads and hello
**.region[3].regionHost[2].timeSinkRegisterWithControlUnit = 10.0
**.region[3].regionHost[3].nodeStartTime = 0 # enable send/receive send grads and hello
**.region[3].regionHost[3].timeSinkRegisterWithControlUnit = 11.0

**.region[4].regionHost[0].nodeStartTime = 0 # enable send/receive send grads and hello

**.region[4].regionHost[1].nodeStartTime = 0 # enable send/receive send grads and hello
**.region[4].regionHost[1].timeSinkRegisterWithControlUnit = 12.0
**.region[4].regionHost[2].nodeStartTime = 0 # enable send/receive send grads and hello
**.region[4].regionHost[2].timeSinkRegisterWithControlUnit = 13.0
**.region[4].regionHost[3].nodeStartTime = 0 # enable send/receive send grads and hello
**.region[4].regionHost[3].timeSinkRegisterWithControlUnit = 14.0

**.region[1..4].regionHost[*].nodeStartTime = 0 # enable send/receive send grads and hello








# What if key nodes startup at the same time as root or even earlier
# but do not register or bind until much later, in this case they will
# have their own (proactive) route to the control unit
# HOWEVER this means the registration/binding is manual not just at startup

    















# Foursource nondes begin sending data at 70, 71, 72 and 73 seconds
**.region[1].regionHost[0].scheduleStartTime = 70.00
**.region[2].regionHost[0].scheduleStartTime = 71.00
**.region[3].regionHost[0].scheduleStartTime = 72.00
**.region[4].regionHost[0].scheduleStartTime = 73.00
**.region[1..4].regionHost[*].scheduleStartTime = 3.00




[Config AODVScenario_1f]
# In this case the sinks startup and register after the root starts
# But still with about a second between them

# Due to congestion the proactive RREQ only ever reaches about 90% of nodes
# Consequently while all of sinks' RREQs result in a large number of RREPs back
# a number of them also result in the RREQ being forwarded by nodes that were
# in that 10% who did not achieve a proactive route, one or more times.
# This all leads to significant congestion even with a second between
# registrations. 


extends = AODVScenario_1e



**.fixhost[48].udpApp.confirmRegistration = false





**.region[1].regionHost[1].nodeStartTime = 43.0 # enable send/receive send grads and hello
**.region[1].regionHost[1].timeSinkRegisterWithControlUnit = 43.5
**.region[1].regionHost[2].nodeStartTime = 44.0 # enable send/receive send grads and hello
**.region[1].regionHost[2].timeSinkRegisterWithControlUnit = 44.5
**.region[1].regionHost[3].nodeStartTime = 45.0 # enable send/receive send grads and hello
**.region[1].regionHost[3].timeSinkRegisterWithControlUnit = 45.5

**.region[2].regionHost[1].nodeStartTime = 46.0 # enable send/receive send grads and hello
**.region[2].regionHost[1].timeSinkRegisterWithControlUnit = 46.5
**.region[2].regionHost[2].nodeStartTime = 47.0 # enable send/receive send grads and hello
**.region[2].regionHost[2].timeSinkRegisterWithControlUnit = 47.5
**.region[2].regionHost[3].nodeStartTime = 48.0 # enable send/receive send grads and hello
**.region[2].regionHost[3].timeSinkRegisterWithControlUnit = 48.5

**.region[3].regionHost[1].nodeStartTime = 49.0 # enable send/receive send grads and hello
**.region[3].regionHost[1].timeSinkRegisterWithControlUnit = 49.5
**.region[3].regionHost[2].nodeStartTime = 50.0 # enable send/receive send grads and hello
**.region[3].regionHost[2].timeSinkRegisterWithControlUnit = 50.5
**.region[3].regionHost[3].nodeStartTime = 51.0 # enable send/receive send grads and hello
**.region[3].regionHost[3].timeSinkRegisterWithControlUnit = 51.5

**.region[4].regionHost[1].nodeStartTime = 52.0 # enable send/receive send grads and hello
**.region[4].regionHost[1].timeSinkRegisterWithControlUnit = 52.5
**.region[4].regionHost[2].nodeStartTime = 53.0 # enable send/receive send grads and hello
**.region[4].regionHost[2].timeSinkRegisterWithControlUnit = 53.5
**.region[4].regionHost[3].nodeStartTime = 54.0 # enable send/receive send grads and hello
**.region[4].regionHost[3].timeSinkRegisterWithControlUnit = 54.5

# This scenario expects an arrival at each of 3 appliances in each of four rooms
# On 13 occasions.  So 156 arrivals.
**.expectedDataArrivals = 156









