


[Config AODVScenario_1g]
# This is the one that succeeds in setting up delivery of the sensor data
# through the control unit to the sinks
# it uses proactive route without route replies (1e) and sink confirmation to
# set up route return

extends = AODVScenario_1e

# specific to this config but may be unchanged - just want to be sure or recreating
**.macAckWaitDuration = 0.02s
**.macMaxCSMABackoffs = 7
**.macMaxFrameRetries = 5
**.phy.transmitterPower = 0.1mW


# AODVScenario_1e just creates routes to root because including
# replies to get reverse routes is too congested
# So... let control unit confirm registration and get a route that way
# Hopefully no congestion - downside, only supports one by one manual reg
**.fixhost[48].udpApp.confirmRegistration = true

**.local_repair = true


**.fixhost[48].udpApp.Instability = 0 # Completely stable
#**.fixhost[1..25].udpApp.Instability = 33 # 33% down once every 1.5 hrs
#**.fixhost[25..49].udpApp.Instability = 10 # 10% down once every 5 hrs 
**.fixhost[*].udpApp.Instability = 1  # 1% down once every 2 days (50 hrs)
#**.fixhost[*].udpApp.Instability = 0  # Completely stable


#  NB Following first run seems the RREQs and subsequent confirm data sends are
# interfering with the subsequent registration
# Seems 1s apart may nto be enough - try another one with registrations maybe 2s apart
# Tried it, still failing to get routes TO sink for 3 of them and 1 even no reg arriving
# try expanding ring, tried it, complete failure far too congested
# try mac or phy changes






[Config AODVScenario_1h]
extends = AODVScenario_1g

**.fixhost[48].udpApp.confirmRegistration = false
**.manetrouting.suppress_rreps_on_proactive_rreqs = false




#################################

#[Config AODVScenario_1b]
#extends = AODVScenario_1

#**.expanding_ring_search = true


#[Config AODVScenario_1c]
#extends = AODVScenario_1

#**.local_repair = false


#[Config AODVScenario_1d]
#extends = AODVScenario_1

#**.expanding_ring_search = true
#**.local_repair = false




