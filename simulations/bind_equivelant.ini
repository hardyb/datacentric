

[Config DataC_Experiment_One_to_One_OneRoom]



description = ""

# Varying parameters
#**.numHosts = ${numNodes=251..500 step 1}
**.numHosts = 250

repeat = 25

seed-set = ${repetition}

num-rngs = 2



# Two randomly placed hosts in one room
**.region[1].regionHost[0].sourceFor = "\x83"+"\x2"+"\x0"
**.region[1].regionHost[1].sinkFor =   "\x83"+"\x2"+"\x0"
**.region[1].regionHost[1].simAppTerminationReason = 1
#**.region[1].regionHost[1].simAppTerminationReason = 2
**.region[1].regionHost[1].isAppliance = true
**.region[1].regionHost[0].actionThreads = "heat_sensor_one_pkt.txt"


# Two randomly placed hosts in one room
#**.region[2].regionHost[0].sourceFor = "\x83"+"\x2"+"\x0"
#**.region[2].regionHost[1].sinkFor =   "\x83"+"\x2"+"\x0"
#**.region[2].regionHost[1].simAppTerminationReason = 2
#**.region[2].regionHost[1].isAppliance = true
#**.region[2].regionHost[0].actionThreads = "heat_sensor_one_pkt.txt"


# Two randomly placed hosts in one room
#**.region[3].regionHost[0].sourceFor = "\x83"+"\x2"+"\x0"
#**.region[3].regionHost[1].sinkFor =   "\x83"+"\x2"+"\x0"
#**.region[3].regionHost[1].simAppTerminationReason = 2
#**.region[3].regionHost[1].isAppliance = true
#**.region[3].regionHost[0].actionThreads = "heat_sensor_one_pkt.txt"


# Two randomly placed hosts in one room
#**.region[4].regionHost[0].sourceFor = "\x83"+"\x2"+"\x0"
#**.region[4].regionHost[1].sinkFor =   "\x83"+"\x2"+"\x0"
#**.region[4].regionHost[1].simAppTerminationReason = 2
#**.region[4].regionHost[1].isAppliance = true
#**.region[4].regionHost[0].actionThreads = "heat_sensor_one_pkt.txt"






**.estimationMethod = "experiment"


# Simulation completion
sim-time-limit = 7s # 8000s
**.expectedDataArrivals = 1


# Timed behaviour

# All hosts start radio etc and also sending data at time zero which should
# come straight after startup host congiguration  

**.region[1].regionHost[0].nodeStartTime = ${increment=0..1 step 0.1} * 0
**.region[1].regionHost[0].scheduleStartTime = ${increment} * 0
**.region[1].regionHost[1].nodeStartTime = ${increment} * 0

#**.region[2].regionHost[0].nodeStartTime = ${increment} * 1
#**.region[2].regionHost[0].scheduleStartTime = ${increment} * 1
#**.region[2].regionHost[1].nodeStartTime = ${increment} * 1

#**.region[3].regionHost[0].nodeStartTime = ${increment} * 2
#**.region[3].regionHost[0].scheduleStartTime = ${increment} * 2
#**.region[3].regionHost[1].nodeStartTime = ${increment} * 2


#**.region[4].regionHost[0].nodeStartTime = ${increment} * 3
#**.region[4].regionHost[0].scheduleStartTime = ${increment} * 3
#**.region[4].regionHost[1].nodeStartTime = ${increment} * 3






#**.region[1..4].regionHost[*].nodeStartTime = 0 # enable send/receive send grads and hello
#**.region[1..4].regionHost[*].scheduleStartTime = 0






[Config DataC_ApplianceDemand]



description = ""

# Varying parameters
**.numHosts = ${numNodes=51..52 step 1}
#**.numHosts = 250

#**.TransmissionAntennaGainIndB = -6dB 
#**.ReceiveAntennaGainIndB = -6dB

repeat = 25

seed-set = ${repetition}

num-rngs = 2



# Two randomly placed hosts accross the whole network
**.host[0].app.sourceFor = "\x2"+"\x2"+"\x0"
**.host[1].app.sourceFor = "\x2"+"\x2"+"\x0"
**.host[2].app.sourceFor = "\x2"+"\x2"+"\x0"
**.host[3].app.sourceFor = "\x2"+"\x2"+"\x0"
**.host[4].app.sinkFor =   "\x2"+"\x2"+"\x0"
**.host[0].app.isAppliance = true
**.host[1].app.isAppliance = true
**.host[2].app.isAppliance = true
**.host[3].app.isAppliance = true

**.host[0].app.actionThreads = "an_appliance.txt"
**.host[1].app.actionThreads = "an_appliance.txt"
**.host[2].app.actionThreads = "an_appliance.txt"
**.host[3].app.actionThreads = "an_appliance.txt"


**.estimationMethod = "experiment"


# Simulation completion
sim-time-limit = 90s # 8000s
**.expectedDataArrivals = 156


# Timed behaviour

# All hosts start radio etc and also sending data at time zero which should
# come straight after startup host congiguration  
**.host[*].app.nodeStartTime = 0
**.host[*].app.scheduleStartTime = 0




[Config DataC_Experiment_One_to_One_Binding]



description = ""

# Varying parameters
**.numHosts = ${numNodes=51..52 step 1}
#**.numHosts = 250

#**.TransmissionAntennaGainIndB = -6dB 
#**.ReceiveAntennaGainIndB = -6dB

repeat = 25

seed-set = ${repetition}

num-rngs = 2



# Adjustments to common
#**.phy.transmitterPower				 = 0.1mW



#**.TransmissionAntennaGainIndB = -6dB 
#**.ReceiveAntennaGainIndB = -6dB
#**.ReceiveAntennaGainIndB = ${antennaRxEfficiency=-6..6 step 0.5}dB 
#**.TransmissionAntennaGainIndB = ${antennaTxEfficiency=-6..6 step 0.5 ! antennaRxEfficiency}dB 


#**.phy.transmitterPower				 = 1.0mW
#**.phy.transmitterPower = ${tmtPower=0.1..1.0 step 0.1}mW



# Two randomly placed hosts accross the whole network
**.host[0].app.sourceFor = "\x83"+"\x2"+"\x0"
**.host[1].app.sinkFor =   "\x83"+"\x2"+"\x0"
**.host[1].app.simAppTerminationReason = 0
**.host[1].app.isAppliance = true

**.host[0].app.actionThreads = "heat_sensorx.txt"


**.estimationMethod = "experiment"


# Simulation completion
sim-time-limit = 7s # 8000s
**.expectedDataArrivals = 13


# Timed behaviour

# All hosts start radio etc and also sending data at time zero which should
# come straight after startup host congiguration  
**.host[*].app.nodeStartTime = 0
**.host[*].app.scheduleStartTime = 0





[Config DataC_Experiment_Binding_1]

# This experiment...

description = ""

# Varying parameters
**.numHosts = ${numNodes=50..125 step 1}
#*.numFixHosts = 125

repeat = 10

# Control Unit related parameters
# LEAVE OUT COMMONCONTROLUNIT.INI 
#**.manetrouting.proactiveRreqTimeout = 36000000 # 10 Hours
#**.manetrouting.suppress_rreps_on_proactive_rreqs = true
#**.fixhost[48].udpApp.confirmRegistration = false
#**.fixhost[48].app.nodeStartTime = 0.01



#**.fixhost[*].udpApp.bindWithSource = true


**.region[1].regionHost[0].sourceFor = "\x83"+"\x2"+"\x0"
**.region[1].regionHost[1].sinkFor =   "\x83"+"\x2"+"\x0"
**.region[1].regionHost[1].isAppliance = true

# change to only one packet or limit run time
# but start early
**.region[1].regionHost[0].actionThreads = "heat_sensor.txt"




# Simulation completion
sim-time-limit = 300s # 8000s
**.expectedDataArrivals = 1


# Timed behaviour

**.region[1].regionHost[0].nodeStartTime = 0 # enable send/receive send grads and hello
**.region[1].regionHost[0].scheduleStartTime = 0


**.region[1].regionHost[1].nodeStartTime = 0 # enable send/receive send grads and hello
**.region[1].regionHost[1].timeSinkRegisterWithControlUnit = 0


**.region[1..4].regionHost[*].nodeStartTime = 0 # enable send/receive send grads and hello
**.region[1..4].regionHost[*].scheduleStartTime = 0



[Config DataC_Experiment_Binding_2]

# This experiment...

description = ""

# Varying parameters
**.numHosts = ${numNodes=50..125 step 1}
#*.numFixHosts = 125

repeat = 10

# Control Unit related parameters
# LEAVE OUT COMMONCONTROLUNIT.INI 
#**.manetrouting.proactiveRreqTimeout = 36000000 # 10 Hours
#**.manetrouting.suppress_rreps_on_proactive_rreqs = true
#**.fixhost[48].udpApp.confirmRegistration = false
#**.fixhost[48].app.nodeStartTime = 0.01



#**.fixhost[*].udpApp.bindWithSource = true


**.region[1..4].regionHost[0].sourceFor = "\x83"+"\x2"+"\x0"
**.region[1..4].regionHost[1].sinkFor =   "\x83"+"\x2"+"\x0"
**.region[1..4].regionHost[1].isAppliance = true

# change to only one packet or limit run time
# but start early
**.region[1..4].regionHost[0].actionThreads = "heat_sensor.txt"




# Simulation completion
sim-time-limit = 300s # 8000s
**.expectedDataArrivals = 4


# Timed behaviour

**.region[1..4].regionHost[0].nodeStartTime = 0 # enable send/receive send grads and hello
**.region[1..4].regionHost[0].scheduleStartTime = 0


**.region[1..4].regionHost[1].nodeStartTime = 0 # enable send/receive send grads and hello
**.region[1..4].regionHost[1].timeSinkRegisterWithControlUnit = 0


**.region[1..4].regionHost[*].nodeStartTime = 0 # enable send/receive send grads and hello
**.region[1..4].regionHost[*].scheduleStartTime = 0





[Config AODV_Experiment_Binding_3]

# This experiment...

description = ""

# Varying parameters
#*.numFixHosts = ${numNodes=50..125 step 1}
**.numHosts = 125

repeat = 10

# Control Unit related parameters
# LEAVE OUT COMMONCONTROLUNIT.INI 
#**.manetrouting.proactiveRreqTimeout = 36000000 # 10 Hours
#**.manetrouting.suppress_rreps_on_proactive_rreqs = true
#**.fixhost[48].udpApp.confirmRegistration = false
#**.fixhost[48].app.nodeStartTime = 0.01



#**.fixhost[*].udpApp.bindWithSource = true


**.region[1..4].regionHost[0].sourceFor = "\x83"+"\x2"+"\x0"
**.region[1..4].regionHost[1].sinkFor =   "\x83"+"\x2"+"\x0"
**.region[1..4].regionHost[2].sourceFor = "\x83"+"\x1"+"\x0"
**.region[1..4].regionHost[3].sinkFor =   "\x83"+"\x1"+"\x0"



**.region[1..4].regionHost[1].isAppliance = true
**.region[1..4].regionHost[3].isAppliance = true

# change to only one packet or limit run time
# but start early
**.region[1..4].regionHost[0].actionThreads = "heat_sensor.txt"
**.region[1..4].regionHost[2].actionThreads = "occ_sensor.txt"




# Simulation completion
sim-time-limit = 450s # 8000s
**.expectedDataArrivals = 8


# Timed behaviour

**.region[1].regionHost[0].nodeStartTime = ${increment=0..2 step 0.1} * 0
**.region[1].regionHost[0].scheduleStartTime = ${increment} * 0
**.region[1].regionHost[1].nodeStartTime = ${increment} * 0
**.region[1].regionHost[1].timeSinkRegisterWithControlUnit = ${increment} * 0

**.region[1].regionHost[2].nodeStartTime = ${increment} * 1
**.region[1].regionHost[2].scheduleStartTime = ${increment} * 1
**.region[1].regionHost[3].nodeStartTime = ${increment} * 1
**.region[1].regionHost[3].timeSinkRegisterWithControlUnit = ${increment} * 1


**.region[2].regionHost[0].nodeStartTime = ${increment} * 2
**.region[2].regionHost[0].scheduleStartTime = ${increment} * 2
**.region[2].regionHost[1].nodeStartTime = ${increment} * 2
**.region[2].regionHost[1].timeSinkRegisterWithControlUnit = ${increment} * 2

**.region[2].regionHost[2].nodeStartTime = ${increment} * 3
**.region[2].regionHost[2].scheduleStartTime = ${increment} * 3
**.region[2].regionHost[3].nodeStartTime = ${increment} * 3
**.region[2].regionHost[3].timeSinkRegisterWithControlUnit = ${increment} * 3

**.region[3].regionHost[0].nodeStartTime = ${increment} * 4
**.region[3].regionHost[0].scheduleStartTime = ${increment} * 4
**.region[3].regionHost[1].nodeStartTime = ${increment} * 4
**.region[3].regionHost[1].timeSinkRegisterWithControlUnit = ${increment} * 4

**.region[3].regionHost[2].nodeStartTime = ${increment} * 5
**.region[3].regionHost[2].scheduleStartTime = ${increment} * 5
**.region[3].regionHost[3].nodeStartTime = ${increment} * 5
**.region[3].regionHost[3].timeSinkRegisterWithControlUnit = ${increment} * 5

**.region[4].regionHost[0].nodeStartTime = ${increment} * 6
**.region[4].regionHost[0].scheduleStartTime = ${increment} * 6
**.region[4].regionHost[1].nodeStartTime = ${increment} * 6
**.region[4].regionHost[1].timeSinkRegisterWithControlUnit = ${increment} * 6

**.region[4].regionHost[2].nodeStartTime = ${increment} * 7
**.region[4].regionHost[2].scheduleStartTime = ${increment} * 7
**.region[4].regionHost[3].nodeStartTime = ${increment} * 7
**.region[4].regionHost[3].timeSinkRegisterWithControlUnit = ${increment} * 7




**.region[1..4].regionHost[*].nodeStartTime = 0 # enable send/receive send grads and hello
**.region[1..4].regionHost[*].scheduleStartTime = 0


