

[Config DC_QueryBasedRegions]

# This experiment...

description = ""

# Varying parameters
#*.numFixHosts = ${numNodes=50..125 step 1}
**.numHosts = 250

repeat = 25

# NBNBNB
# We have temporarily hadthe DC network layer take the sinkFor
# string as is rather than concatonating short or long context
# Need to think more about this   

# Initially just to test special interest - needs multiple sinks/regions doing 
**.region[1].regionHost[0].sinkFor = "\x2"+"\x2"+"\xFF"+"\x6"+"\x1"+"\x0"
**.region[1].regionHost[0].simAppTerminationReason = 2 # when all have arrived

**.region[1].regionHost[1].sourceFor = "\x2"+"\x2"+"\x0"
**.region[1].regionHost[1].actionThreads = "demand_one_pkt.txt"
**.region[1].regionHost[1].scheduleStartTime = ${increment=0..1 step 0.1}
**.region[1].regionHost[1].isAppliance = true

**.region[1].regionHost[2].sourceFor = "\x2"+"\x2"+"\x0"
**.region[1].regionHost[2].actionThreads = "demand_one_pkt.txt"
**.region[1].regionHost[2].scheduleStartTime = ${increment}
**.region[1].regionHost[2].isAppliance = true

**.region[1].regionHost[3].sourceFor = "\x2"+"\x2"+"\x0"
**.region[1].regionHost[3].actionThreads = "demand_one_pkt.txt"
**.region[1].regionHost[3].app.scheduleStartTime = ${increment}
**.region[1].regionHost[3].isAppliance = true

**.region[1].regionHost[4].sourceFor = "\x2"+"\x2"+"\x0"
**.region[1].regionHost[4].actionThreads = "demand_one_pkt.txt"
**.region[1].regionHost[4].scheduleStartTime = ${increment}
**.region[1].regionHost[4].isAppliance = true



# Simulation completion
sim-time-limit = 7s
**.expectedDataArrivals = 4


# Timed behaviour



#        PREPREPARED STRINGS FOR USE
#        string STRINGEND = "\x0";
#        string DEMAND_QUERYBASED = "\x2";
#        string DEMAND_COLLABERATIONBASED = "\x42";
#        string ENVIRONMENTAL_EVENTBASED = "\x83";
#        string CURRENT = "\x2";
#        string BID = "\x1";
#        string OCCUPANCY = "\x1";
#        string TEMP = "\x2";




[Config DC_QueryBased]

# This experiment...

description = ""

# Varying parameters
#*.numFixHosts = ${numNodes=50..125 step 1}
**.numHosts = 250

repeat = 25


# Control Unit related parameters
#**.manetrouting.proactiveRreqTimeout = 36000000 # 10 Hours, ie never
#**.manetrouting.suppress_rreps_on_proactive_rreqs = true
#**.fixhost[0].udpApp.confirmRegistration = false
#**.fixhost[0].app.nodeStartTime = 0.01


#nodeStartTime
#scheduleStartTime
#timeSinkRegisterWithControlUnit

# heat_sensor_one_pkt.txt

**.host[0].app.sinkFor = "\x2"+"\x2"+"\x0"
**.host[0].app.simAppTerminationReason = 2 # when all have arrived
**.host[0].mobility.initialX = 0.1m
**.host[0].mobility.initialY = 0.1m
**.host[0].mobility.initialZ = 0.75m
**.host[0].app.setParametersDirectly = true


**.host[1].app.sourceFor = "\x2"+"\x2"+"\x0"
**.host[1].app.actionThreads = "demand_one_pkt.txt"
**.host[1].app.scheduleStartTime = ${increment=0..1 step 0.1}
**.host[1].app.isAppliance = true

**.host[2].app.sourceFor = "\x2"+"\x2"+"\x0"
**.host[2].app.actionThreads = "demand_one_pkt.txt"
**.host[2].app.scheduleStartTime = ${increment}
**.host[2].app.isAppliance = true

**.host[3].app.sourceFor = "\x2"+"\x2"+"\x0"
**.host[3].app.actionThreads = "demand_one_pkt.txt"
**.host[3].app.scheduleStartTime = ${increment}
**.host[3].app.isAppliance = true

**.host[4].app.sourceFor = "\x2"+"\x2"+"\x0"
**.host[4].app.actionThreads = "demand_one_pkt.txt"
**.host[4].app.scheduleStartTime = ${increment}
**.host[4].app.isAppliance = true



# Simulation completion
sim-time-limit = 7s
**.expectedDataArrivals = 4


# Timed behaviour



#        PREPREPARED STRINGS FOR USE
#        string STRINGEND = "\x0";
#        string DEMAND_QUERYBASED = "\x2";
#        string DEMAND_COLLABERATIONBASED = "\x42";
#        string ENVIRONMENTAL_EVENTBASED = "\x83";
#        string CURRENT = "\x2";
#        string BID = "\x1";
#        string OCCUPANCY = "\x1";
#        string TEMP = "\x2";









[Config DataCentric_Experiment_1]



# experiment

# half the recommended number from building automation RFC
# used for routing
#**.numHosts = 125
**.numHosts = ${numNodes=50..125 step 1}

#sim-time-limit = 50500s

description = "DataCentric_Experiment_1"

# try this
#        for i=0..10 {
#            **.region[1..4].regionHost[i].nodeStartTime = i
#        }

################## Delete afterwards

# Sources 
**.region[1..4].regionHost[0].sourceFor = "\x83"+"\x2"+"\x0"
**.region[1..4].regionHost[0].actionThreads = "heat_sensor.txt"

# Sinks
**.region[1].regionHost[1..3].sinkFor = "\x83"+"\x2"+"\x0"
**.region[2].regionHost[1..3].sinkFor = "\x83"+"\x2"+"\x0"
**.region[3].regionHost[1..3].sinkFor = "\x83"+"\x2"+"\x0"
**.region[4].regionHost[1..3].sinkFor = "\x83"+"\x2"+"\x0"

**.region[1].regionHost[1..3].isAppliance = true
**.region[2].regionHost[1..3].isAppliance = true
**.region[3].regionHost[1..3].isAppliance = true
**.region[4].regionHost[1..3].isAppliance = true

# Simulation completion
sim-time-limit = 8000s
**.expectedDataArrivals = 156


# Timed behaviour

# sink start times
**.region[1].regionHost[1].nodeStartTime = 43.0 # enable send/receive send grads and hello
**.region[1].regionHost[2].nodeStartTime = 44.0 # enable send/receive send grads and hello
**.region[1].regionHost[3].nodeStartTime = 45.0 # enable send/receive send grads and hello

**.region[2].regionHost[1].nodeStartTime = 46.0 # enable send/receive send grads and hello
**.region[2].regionHost[2].nodeStartTime = 47.0 # enable send/receive send grads and hello
**.region[2].regionHost[3].nodeStartTime = 48.0 # enable send/receive send grads and hello

**.region[3].regionHost[1].nodeStartTime = 49.0 # enable send/receive send grads and hello
**.region[3].regionHost[2].nodeStartTime = 50.0 # enable send/receive send grads and hello
**.region[3].regionHost[3].nodeStartTime = 51.0 # enable send/receive send grads and hello

**.region[4].regionHost[1].nodeStartTime = 52.0 # enable send/receive send grads and hello
**.region[4].regionHost[2].nodeStartTime = 53.0 # enable send/receive send grads and hello
**.region[4].regionHost[3].nodeStartTime = 54.0 # enable send/receive send grads and hello


# source start times
**.region[1].regionHost[0].nodeStartTime = 0 # enable send/receive send grads and hello
**.region[2].regionHost[0].nodeStartTime = 0 # enable send/receive send grads and hello
**.region[3].regionHost[0].nodeStartTime = 0 # enable send/receive send grads and hello
**.region[4].regionHost[0].nodeStartTime = 0 # enable send/receive send grads and hello

**.region[1..4].regionHost[*].nodeStartTime = 0 # enable send/receive send grads and hello




# Not used in data centric?
#**.region[1].regionHost[1].timeSinkRegisterWithControlUnit = 43.5
#**.region[1].regionHost[2].timeSinkRegisterWithControlUnit = 44.5
#**.region[1].regionHost[3].timeSinkRegisterWithControlUnit = 45.5
#**.region[2].regionHost[1].timeSinkRegisterWithControlUnit = 46.5
#**.region[2].regionHost[2].timeSinkRegisterWithControlUnit = 47.5
#**.region[2].regionHost[3].timeSinkRegisterWithControlUnit = 48.5
#**.region[3].regionHost[1].timeSinkRegisterWithControlUnit = 49.5
#**.region[3].regionHost[2].timeSinkRegisterWithControlUnit = 50.5
#**.region[3].regionHost[3].timeSinkRegisterWithControlUnit = 51.5
#**.region[4].regionHost[1].timeSinkRegisterWithControlUnit = 52.5
#**.region[4].regionHost[2].timeSinkRegisterWithControlUnit = 53.5
#**.region[4].regionHost[3].timeSinkRegisterWithControlUnit = 54.5



# Foursource nondes begin sending data at 70, 71, 72 and 73 seconds
**.region[1].regionHost[0].scheduleStartTime = 70.00
**.region[2].regionHost[0].scheduleStartTime = 71.00
**.region[3].regionHost[0].scheduleStartTime = 72.00
**.region[4].regionHost[0].scheduleStartTime = 73.00
**.region[1..4].regionHost[*].scheduleStartTime = 3.00



